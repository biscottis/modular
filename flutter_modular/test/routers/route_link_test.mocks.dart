// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_modular/test/routers/route_link_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/widgets/navigator.dart' as _i4;
import 'package:flutter_modular/src/routers/route_link.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeRouteLink extends _i1.Fake implements _i2.RouteLink {}

/// A class which mocks [RouteLink].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteLink extends _i1.Mock implements _i2.RouteLink {
  MockRouteLink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RouteLink copy() => (super.noSuchMethod(Invocation.method(#copy, []),
      returnValue: _FakeRouteLink()) as _i2.RouteLink);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  _i3.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [result]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  void pop<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  void popUntil(bool Function(_i4.Route<dynamic>)? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<T?> push<T extends Object?>(_i4.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, bool Function(_i4.Route<dynamic>)? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [newRouteName, predicate],
              {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
          _i4.Route<T>? newRoute,
          {TO? result}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacement, [newRoute], {#result: result}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<dynamic> showDialog(
          {_i5.Widget? child,
          _i5.WidgetBuilder? builder,
          bool? barrierDismissible = true}) =>
      (super.noSuchMethod(
          Invocation.method(#showDialog, [], {
            #child: child,
            #builder: builder,
            #barrierDismissible: barrierDismissible
          }),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
}
